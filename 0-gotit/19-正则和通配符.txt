描述 通配符, 正则表达式, 以及它们之间的一些区别.
一. 正则表达式
正则表达式(Regular Expressoin)是由一串字符和元字符构成的字符串.
元字符是用来阐释字符表达式意思的字符,简言之,就是用来描述字符的字符.
正则表达式的主要功能是文本查询和字符串操作,它可以匹配文本的一个字符或字符
集合.实际上,正则表达式完成了数据的过滤,将不满足正则表达式的数据过滤掉,剩
下的就是正则表达式匹配的数据.
(1)基本的正则表达式元字符集合及其意义:
X*: 匹配零个或任意个大写X
.: 匹配任意单个字符
^: 匹配出现在行首或字符串开始位置的空字符串
$: 匹配出现在行末的空字符串
[]: 匹配字符集合. 例如[A-E]匹配任意大写的A,B,C,D,或E. 
    而[^A-E]匹配除A,B,C,D,和E之外的任意字符.
\: 转义符,屏蔽一个元字符的特殊意义
\<\>: 精确匹配符号
A: 匹配大写字母A
a: 匹配小写字母a
\d: 匹配任意一位数字
\D: 匹配任意单个非数字字符
\w: 匹配任意单个字母数字字符,同义词是[:alnum:]
X{n}: 精确匹配n个字符X
X{n,m}: 匹配最少n个并且不超过m个字母X.如果省略m,将尝试匹配最少n个X
(2)扩展的正则表达式元字符及其意义
X?: 匹配出现零次或一次的大写字母X
X+: 匹配一个或多个字母X
(): 表示一个字符集合或用在分类表达式中
|: 表示"或",匹配一组可选的字符.()和|常常结合使用,表示一组可选字符集合.
例如: re(a|b|c)d 等价于 re[abc]d, 即read, rebd, recd 这四个字符串.

Bash shell本身不支持正则表达式,在bash命令行里面输入正则表达式,是不会被正确
解析的.使用正则表达式的是shell命令和工具,如grep, sed, awk 等.

二. 通配符
如上所述,bash shell本身不支持正则表达式,但bash也可以使用一些特殊字符来进行
模糊匹配,且这些匹配主要用在匹配文件名上.对这些特殊字符描述如下:
*: 匹配零个或多个字符, 该字符在通配符和正则表达式中有不同的含义
?: 匹配任意单个字符
[]: 匹配字符集合中的某个字符
[!]: 不匹配字符集合中的字符

三. 正则表达式和通配符的区别
(1)通配符是bash shell自身的功能,直接在bash命令行中使用,有bash负责进行通配符
扩展. 而正则表达式需要相关工具支持,不是由shell命令自己来解析正则表达式,如
grep -E, awk, vim, perl, sed等,不同命令对正则表达式的支持可能有所不同.
(2)同一个特殊字符在通配符和正则表达式中有不同的含义,例如'*'在正则表达式中表
示零个或多个在*字符之前的普通字符,而在通配符中,*表示匹配任意个字符.
