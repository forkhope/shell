描述 find 命令的使用

一. 操作运算符
(1) expr1 -o expr2
    Or; expr2 is not evaluated if expr1 is true. 即这是一个或操作.

二. 查找时跳过一个或多个目录
find命令可以使用-path pattern -prune来忽略一个或多个目录.例如:
(1)find . -path ./test -prune 将会忽略当前目录的test目录.
(2)find . \( -path "./test" -o -path "./out" \) -prune 将忽略当前目录下
的test目录和out目录. 注意,在"\("和"-path"之间一定要有空格,否则会报错.
(3)这个-path选项需要指定具体的路径,而不是递归忽略,例如存在 ./a/test/a/,
./b/test/b, ./c/test/c 三个目录,如果想要全部忽略test目录,只写为-path ./test
是不行的,只能使用正则表达式进行模糊匹配,例如-path "*test".

三. 查找指定类型的文件
find在查找时,可以使用 -name pattern 来查找指定类型的文件.例如:
(1)find . -name "*.c" 将会在当前目录下查找 ".c" 类型的文件.
(2)find . -name "*.c" -o -name "*.h" 将会在当前目录下查找".c"和".h"类型的
文件,实际上就是通过-o来执行或操作,从而查找多种类型的文件.此时,要注意一点,
如果希望对查找到的内容做一些格式化打印操作,例如find . -name "*.c" -printf
"%f\t%p\n",那么当查找多个类型文件时,每个-name后面就要跟着-printf,类似于
find . -name "*.c" -printf "%f\t%p\n" -o -name "*.h" -printf "%f\t%p\n",不
能写为find . -name "*.c" -o -name -printf "%f\t%p\n",这种写法只会对找到的
".h"类型文件做格式化输出.这是因为-o把两个表达式分隔开,此时-name "*.c"和
-name "*.h" -printf "%f\t%p\n"是两个独立的表达式,-printf语句对前面的-name
"*.c"不起作用.
---------------------------------------------------------------
还可以使用 -regex pattern -type f 选项来查找指定类型的文件. "-type f" 表示
查找regular file,即普通文本文件. 对 "-regex pattern" 描述如下:
-regex pattern: File name matches regular expression pattern. This is a
match on the whole path, not a search. For example, to match a file named
'./fubar3', you can use the regular expression '.*bar.' or '.*b.*3', but
not 'f.*r3'.即,pattern中要指定一个完整的路径,比如相对路径的'./'就需要指定.
例如要在当前目录下递归查找".c", ".h"类型的文件,可以写为:
    find ./ -regex '.*\.\(c\|h)\)' -type f
在正则表达式'.*\.\(c\|h\)'中,最开始的".*"就用于指定完整路径,它可以匹配"./",
"./a", "./b/c/"等等目录.接下来的"\."则是匹配后缀名前面的'.',即".c",".cpp",
".h"里面的那个'.',最后的\(c\|h)就是要匹配的具体后缀名了.其中, '\' 表示引用,
即指示shell不对后面的字符做特殊解释,而留给find命令去解释其意义.

四. 输出
(1) -print 选项. man find手册对该选项描述为:
print the full file name on the standard output, followed by a newline.
(2) find使用 -printf format 来进行格式化输出. 注意,-printf does not add a
newline at the end of the string. 一些转换格式描述如下:
%f: File's name with any leading directories removed (only the last element)
%p: File's name
