描述 sed 命令的使用
sed [OPTION]... {script-only-if-no-other-script} [input-file]...

一. 定址 Addresses
Sed commands can be given with no addresses, in which case the command will
be executed for all input lines; with one address, in which case the command
will only be executed for input lines which match that address; or with two
addresses, in which case the command will be executed for all input lines
which match the inclusive range of lines starting from the first address and
continuing to the second address. 这里描述的就是sed如何选择要操作的行.
(1) number: Match only the specified line number.直接用数字指定要操作的行数
(2) /regexp/: Match lines matching the regular expression regexp.
(3) $: Match the last line.

二. 删除操作
(1) d: Delete pattern space. Start next cycle. 删除模块空间中的行. 例如:
sed '1d' filename 将会删除filename文件的第一行.
sed '$d' filename 将会删除filename文件的最后一行. '$' 表示最后一行.
sed '/xml/d' filename 或者 sed '/xml/'d filename 将会删除所有包含xml的行.
注意: 写为sed '/*xml*/d' filename 或者 sed "/*xml*/d" 将匹配不到包含有xml
的行.这跟'*'这个字符在通配符和正则表达式之间的差异有关.
具体可以参考 "19-正则和通配符.txt".
(2) 用 sed 删除行末的 '\r' 字符
Windows下的文本文件,每行结尾是"\n\r",而在Linux下,每行结尾只有'\n',那个多
出来的'\r'常常会导致一些问题,可以用 sed -i 's/\r//' filename 去掉它.
(3) 删除什么都没有的空行(不包含空白字符组成的行)
    sed '/^$/d' [input-flie]    # 也就是把开头和结尾什么都没有的行视作空行
(4) 删除由空白字符(空格,制表符,换行符,回车符)组成的行
    sed '/^[[:space:]]*$/d' [input-file]
这里使用POSIX字符类[:space:]表示空白字符,后面跟了一个*,表示匹配0个或多个.

三. 替换操作
(1) s/regexp/replacement/
Attempt to match regexp against the pattern space. If successful, replace
that portion matched with replacement. The replacement may contain the
special character & to refer to that portion of the pattern space which
matched, and the special escapes \1 through \9 to refer to the
corresponding matching sub-expressions in the regexp. 一个执行的例子如下:
john:~$sed s'/foo/bar/'      # 表示要将foo替换成bar,从标准输入接收输入
afoo tian       # 可以看到,它并不是字符串全匹配才进行替换,而是一匹配就替换
abar tian       # 这里的 "afoo" 也被替换成了 "abar".
fooF tian       # 同上,它只要一遇到"foo"就会替换成"bar",即使"foo"是其他
barF tian       # 字符串的一部分.
afooF tian      # "foo"位于字符串的中间,也被替换了
abarF tian
foo tian        # 当然,完整的"foo"也会被替换
bar tian

四. sed中引用shell变量
(1)把单引号改成双引号,如'/pattern/command/'改成"/pattern/commond",因为单引号
不支持扩展,想用${param}来引用变量param的值,在单引号下是不生效的.
(2)引用shell变量也可以不加双引号,不加{},此时,sed整个就不能带引号(双引号和单
引号都不能带). 例如: sed /$pat/d filename.txt.

五.
